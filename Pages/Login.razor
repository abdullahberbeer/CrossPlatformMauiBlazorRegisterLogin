@page "/login"
@using MauiApp1.Models;
@using MauiApp1.Services;


@using Newtonsoft.Json;
@using System.IdentityModel.Tokens.Jwt;
@using System.Security.Claims;
@inject IAppService _appService; 
@inject NavigationManager _navigationManager;

<h3>Giriş Yap</h3>

<EditForm Model="@loginModel" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Email Adresi</label>
        <input type="text" @bind-value="@loginModel.UserName" class="form-control" placeholder="Mail adresinizi giriniz.." />
        <ValidationMessage For="@(()=> loginModel.UserName)"/>
    </div>
    <div class="form-group mt-2">
        <label>Şifre</label>
        <input type="password" @bind-value="@loginModel.Password" class="form-control" placeholder="Şifrenizi giriniz.." />
        <ValidationMessage For="@(()=> loginModel.Password)" />
    </div>

    <div class="mt-2 text-end">
        <NavLink class="nav-link" href="register">
            <span>Hesabınız yok ise oluşturmak için tıklayınız..</span>
        </NavLink>
    </div>

    <div class="text-center mt-2">
        <button class="btn btn-primary" type="submit">
            <span class="@_spinnerClass" role="status" aria-hidden="true"></span>
            Giriş Yap
         </button>
    </div>
</EditForm>

@code {
    LoginModel loginModel = new();

    private string _spinnerClass = "";

    private async void Submit()
    {
        _spinnerClass = "spinner-border spinner-border-sm";

        var response =await _appService.AuthenticateUser(loginModel);

        if (response.IsSuccess)
        {
            var tokenResponse = JsonConvert.DeserializeObject<AuthenticateRequestandResponse>(response.Content.ToString());

            var handler = new JwtSecurityTokenHandler();
            var jsontoken = handler.ReadToken(tokenResponse.AccessToken) as JwtSecurityToken;

            string userID = jsontoken.Claims.FirstOrDefault(f=> f.Type==JwtRegisteredClaimNames.NameId).Value;
            string name = jsontoken.Claims.FirstOrDefault(f=> f.Type==JwtRegisteredClaimNames.Name).Value;
            string role = jsontoken.Claims.FirstOrDefault(f => f.Type == "role").Value;
            string userAvatar = jsontoken.Claims.FirstOrDefault(f => f.Type == "UserAvatar").Value;
            string email = loginModel.UserName;

            var userDetail = new UserDetail
            {
                Email=email,
                Name=name,
                AccessToken = tokenResponse.AccessToken,
                RefreshToken=tokenResponse.RefreshToken,
                UserID=userID,
                UserAvatar=!string.IsNullOrWhiteSpace(userAvatar) ? $"{APIs.baseUrl}/{userAvatar}":"",
                Role=role
               

            };

            string userDetailSerializeObj = JsonConvert.SerializeObject(userDetail);

            await SecureStorage.SetAsync(nameof(Setting.UserDetail),userDetailSerializeObj);

            Setting.UserDetail = userDetail;
            _navigationManager.NavigateTo("/dashboard");
        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Hata" ,"Kullanıcı adı veya parola yanlış..","Çık");
        }

        _spinnerClass = "";
        this.StateHasChanged();
    }

}
